[{"/Users/hotan/Web-Dev/calender/calendar-challenge/src/index.js":"1","/Users/hotan/Web-Dev/calender/calendar-challenge/src/App.js":"2","/Users/hotan/Web-Dev/calender/calendar-challenge/src/reportWebVitals.js":"3","/Users/hotan/Web-Dev/calender/calendar-challenge/src/Calendar.js":"4","/Users/hotan/Web-Dev/calender/calendar-challenge/src/DateCell.js":"5","/Users/hotan/Web-Dev/calender/calendar-challenge/src/EventsList.js":"6","/Users/hotan/Web-Dev/calender/calendar-challenge/src/utility.js":"7","/Users/hotan/Web-Dev/calender/calendar-challenge/src/ViewEvent.js":"8"},{"size":504,"mtime":1611723455498,"results":"9","hashOfConfig":"10"},{"size":1860,"mtime":1612071575397,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1611723455498,"results":"12","hashOfConfig":"10"},{"size":5779,"mtime":1612065936970,"results":"13","hashOfConfig":"10"},{"size":7406,"mtime":1612066375230,"results":"14","hashOfConfig":"10"},{"size":771,"mtime":1612050255777,"results":"15","hashOfConfig":"10"},{"size":263,"mtime":1612063972003,"results":"16","hashOfConfig":"10"},{"size":695,"mtime":1612057168936,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ek7cjl",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/hotan/Web-Dev/calender/calendar-challenge/src/index.js",[],["36","37"],"/Users/hotan/Web-Dev/calender/calendar-challenge/src/App.js",[],"/Users/hotan/Web-Dev/calender/calendar-challenge/src/reportWebVitals.js",[],"/Users/hotan/Web-Dev/calender/calendar-challenge/src/Calendar.js",["38"],"import { useState, useEffect, useRef } from 'react';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Switch from '@material-ui/core/Switch';\nimport { DateCell } from './DateCell';\n\nexport const Calendar = ({ events, startingDate, onCreateEvent, onRemoveEvent }) => {\n    const calRef = useRef(null);\n    const [days, setDays] = useState([]);\n    const [dayOne, setDayOne] = useState(startingDate);\n\n    const getMonthName = (date) => {\n      return date.toLocaleString('en-us', { month: 'long' });\n    }\n\n    const getYear = (date) => {\n      return date.getFullYear();\n    }\n\n    const getFirstDay = (date) => {\n      const month = getMonthName(date);\n      const year = getYear(date);\n      return new Date(`${month} 01, ${year}`).getDay();\n    }\n\n    const getDaysInMonth = (month, year) => {\n      return new Date(year, month + 1, 0).getDate();\n    }\n\n    const isSameDay = (day1, day2) => {\n      return (day1.getFullYear() === day2.getFullYear() &&\n      day1.getMonth() === day2.getMonth() &&\n      day1.getDate() === day2.getDate());\n    }\n\n    // disable browser default right click\n    useEffect(() => {\n      if(!calRef.current) return;\n      const preventRightClick = event => {\n        event.preventDefault();\n      }\n\n      calRef.current.addEventListener(\"contextmenu\", preventRightClick);\n    }, [calRef]);\n\n    useEffect(() => {\n      const rows = 6;\n      const cols = 7;\n      const totalDays = rows * cols;\n      let cal = new Array(totalDays).fill().map(\n        // current: is in current month,\n        day => ({ current: false, events: [] })\n      );\n\n      const firstDay = getFirstDay(dayOne);\n      const curMonth = dayOne.getMonth();\n      const curYear = getYear(dayOne);\n      const prevMonth = (curMonth - 1 + 12) % 12;\n      const curMonthNumDays = getDaysInMonth(curMonth, curYear);\n      let prevMonthNumDays = getDaysInMonth(prevMonth, curYear);\n\n      // fill up the days from previous month\n      for(let i = firstDay - 1; i >= 0; i--) {\n        cal[i].day = prevMonthNumDays;\n        cal[i].date = new Date(curYear, curMonth-1, prevMonthNumDays);\n        cal[i].key = cal[i].date +  `${i}`\n        prevMonthNumDays--;\n      }\n\n      // fill up the days in current month\n      let i, j;\n      for(i = firstDay, j = 1; i < firstDay + curMonthNumDays; i++, j++) {\n        cal[i].day = j;\n        cal[i].current = true;\n        cal[i].date = new Date(curYear, curMonth, j);\n        cal[i].key = cal[i].date +  `${j}`\n      }\n\n      // fill up the days in next month\n      for(j = 1; i < totalDays; i++, j++) {\n        cal[i].day = j;\n        cal[i].date = new Date(curYear, curMonth+1, j);\n        cal[i].key = cal[i].date +  `${j}`\n      }\n\n      // map each event to its corresponding day\n      let events_map = {};\n      events.forEach((event, i) => {\n        const key = event.date.toLocaleDateString(\"en-US\"); // dd/mm/yy\n        if(events_map[key]) {\n          events_map[key].push({\n            title: event.title,\n            priority: event.priority,\n            date: event.date,\n            key: i\n          });\n        }\n        else {\n          events_map[key] = [{\n            title: event.title,\n            priority: event.priority,\n            date: event.date,\n            key: i\n          }];\n        }\n      });\n\n      // attach events\n      for(let i = 0; i < totalDays; i++) {\n        const key = cal[i].date.toLocaleDateString(\"en-US\");\n        if(events_map[key])\n          cal[i].events = [...cal[i].events, ...events_map[key]];\n      }\n\n      setDays(cal);\n    }, [dayOne, events]);\n\n\n    const handleCur = () => {\n      setDayOne(startingDate);\n    }\n\n    const handleNext = () => {\n      const curMonth = dayOne.getMonth();\n      const curYear = dayOne.getFullYear();\n      setDayOne(new Date(curYear, curMonth+1, 1));\n    }\n\n    const handlePrev = () => {\n      const curMonth = dayOne.getMonth();\n      const curYear = dayOne.getFullYear();\n      setDayOne(new Date(curYear, curMonth - 1, 1));\n    }\n\n    return (\n        <div ref={calRef} className=\"calender-container\">\n          <div className=\"calender-header\">\n            <div className=\"title\">\n              <h2>{`${getMonthName(dayOne)} ${getYear(dayOne)}`}</h2>\n            </div>\n            <div className=\"control\">\n              <div>\n                <span onClick={handlePrev}><ChevronLeftIcon /></span>\n                <span onClick={handleCur}>Today</span>\n                <span onClick={handleNext}><ChevronRightIcon /></span>\n              </div>\n              <div className=\"toggle\">\n                <Switch\n                  size=\"small\"\n                  name=\"switch-mode\"\n                  inputProps={{ 'aria-label': 'primary checkbox' }}\n               />\n              </div>\n            </div>\n          </div>\n          <div className=\"calender-column-title\">\n            <span>Sun</span>\n            <span>Mon</span>\n            <span>Tue</span>\n            <span>Wed</span>\n            <span>Thu</span>\n            <span>Fri</span>\n            <span>Sat</span>\n          </div>\n          <div className=\"calender-body-container\">\n            <div className=\"calender-body\">\n              {\n                days.length > 0 && days.map((day, i) =>\n                  <DateCell\n                    key={day.key}\n                    day={day.day}\n                    date={day.date}\n                    current={day.current}\n                    events={day.events}\n                    onCreateEvent={onCreateEvent}\n                    onRemoveEvent={onRemoveEvent}\n                    today={day.date && isSameDay(day.date, startingDate)}\n                  />\n                )\n              }\n            </div>\n          </div>\n        </div>\n    );\n}\n","/Users/hotan/Web-Dev/calender/calendar-challenge/src/DateCell.js",[],"/Users/hotan/Web-Dev/calender/calendar-challenge/src/EventsList.js",[],"/Users/hotan/Web-Dev/calender/calendar-challenge/src/utility.js",[],"/Users/hotan/Web-Dev/calender/calendar-challenge/src/ViewEvent.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":116,"column":8,"nodeType":"45","endLine":116,"endColumn":24,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getFirstDay'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [dayOne, events, getFirstDay]",{"range":"52","text":"53"},[3608,3624],"[dayOne, events, getFirstDay]"]